// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password String?

  username String?

  role UserRole @default(USER)
  accounts      Account[]

  sermonsPosted Sermon[]
  favourites Favourite[]
  comments Comment[]
  likes Like[]
  
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Author {
  id String @id @default(cuid())
  name String
  imageUrl String?
  about String? @db.Text

  sermons Sermon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(cuid())
  name String
  imageUrl String?
  about String?

  sermons Sermon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id String @id @default(cuid())
  name String
  imageUrl String?
  address String?

 sermons Sermon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sermon {
  id String @id @default(cuid())
  title String
  slug String @unique
  imageUrl String?
  fileUrl String
  about String?
  dateDelivered DateTime @default(now())
  isPublished Boolean @default(false) 

  authorId String
  author Author @relation(fields: [authorId], references: [id])

  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  locationId String
  location Location @relation(fields: [locationId], references: [id])

  userId String?
  user User? @relation(fields: [userId], references: [id])

  favourites Favourite[]
  comments Comment[]
  likes Like[]



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Comment {
  id String @id @default(cuid())
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sermonId String
  sermon   Sermon @relation(fields: [sermonId], references: [id], onDelete: Cascade)
  likes Like[]

   
}

model Favourite {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sermonId String
  sermon   Sermon @relation(fields: [sermonId], references: [id], onDelete: Cascade)

  @@id([userId, sermonId])
  
}

model Like {
  id String @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sermonId String?
  sermon   Sermon? @relation(fields: [sermonId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

